import { Agent, tool } from '@openai/agents';
import { z } from 'zod';
import { Buffer } from 'node:buffer';
import { generateSQLFromText, dryRunSQL } from '../tools/sql.js';
import { openPullRequest } from '../tools/github.js';
import { recordChange, updateChange, getChange } from '../tools/supabase.js';

type Toolbox = {
  propose_migration?: boolean;
  approve_proposal?: boolean;
  status_report?: boolean;
};

export const opsAgent = new Agent({
  name: 'Ops & DB Agent',
  instructions: `
- حوّل طلبات المستخدم إلى اقتراحات تغيير آمنة مع ملخص مخاطرة.
- لا تطبق أي تغيير إلا بعد موافقة صريحة.
- للأولوية: ربط FKs المفقودة، تصحيح ENUMs/Arrays، توحيد مسارات الطلب/الشحن.
  `,
  model: 'gpt-5.1-mini',
  tools: [
    tool('propose_migration', {
      description: 'حوّل وصف المستخدم إلى SQL migration + تقرير مخاطرة',
      parameters: z.object({
        message: z.string(),
      }),
      execute: async ({ message }) => {
        const sql = await generateSQLFromText(message);
        const dry = await dryRunSQL(sql);
        const risk = dry.errors.length ? 'high' : 'medium';
        const summary = `Proposed SQL length=${sql.length}. ${dry.errors.length ? 'Errors on dry-run' : 'Dry-run clean'}.`;
        const row = await recordChange({
          source: 'chatgpt',
          message,
          proposed_sql: sql,
          risk_level: risk,
          summary,
          status: 'pending',
        });
        return {
          proposal_id: row.id,
          risk_level: risk,
          summary,
          sqlPreview: sql.slice(0, 1000),
          dryRunErrors: dry.errors,
        };
      },
    }),
    tool('approve_proposal', {
      description: 'بعد الموافقة اليدوية، افتح PR بملف المهاجرة / تعديلات الكود',
      parameters: z.object({
        proposal_id: z.string().uuid(),
        branch: z.string().default('ops/auto-migration'),
        title: z.string().default('Ops: proposed migration'),
      }),
      execute: async ({ proposal_id, branch, title }) => {
        const cr = await getChange(proposal_id);
        if (!cr || cr.status !== 'pending') {
          throw new Error('Proposal not found or not pending');
        }
        const files: Record<string, string> = {};
        if (cr.proposed_sql) {
          const stamp = new Date().toISOString().replace(/[-:TZ.]/g, '').slice(0, 14);
          files[`supabase/migrations/${stamp}_agent.sql`] = cr.proposed_sql;
        }
        if (Array.isArray(cr.proposed_files)) {
          for (const file of cr.proposed_files) {
            if (file?.path && typeof file.content === 'string') {
              files[file.path] = Buffer.from(file.content, 'base64').toString('utf-8');
            }
          }
        }
        const pr = await openPullRequest({
          branch,
          title,
          body: `Auto-generated by Ops Agent for proposal ${proposal_id}\n\nRisk: ${cr.risk_level}\nSummary: ${cr.summary}`,
          files,
        });
        await updateChange(proposal_id, {
          status: 'approved',
          pr_url: pr.html_url,
          pr_number: pr.number,
          approved_at: new Date().toISOString(),
        });
        return { pr_url: pr.html_url, pr_number: pr.number };
      },
    }),
    tool('status_report', {
      description: 'يعرض حالة PR/CI وتطبيق المهاجرة',
      parameters: z.object({ proposal_id: z.string().uuid() }),
      execute: async ({ proposal_id }) => {
        const cr = await getChange(proposal_id);
        return cr;
      },
    }),
  ],
});

export function runOpsAgent({ input, toolbox }: { input: string; toolbox?: Toolbox }) {
  return opsAgent.run({ input, toolbox });
}
